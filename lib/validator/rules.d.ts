export interface ValidFunction {
    (...values: any[]): boolean | Promise<boolean>;
}
export declare const customRule: {
    [key: string]: ValidFunction;
};
export declare const rules: {
    object: (arg: any) => boolean;
    null: (arg: any) => boolean;
    boolean: (arg: any) => boolean;
    string: (arg: any) => boolean;
    number: (arg: any) => boolean;
    array: (arg: any) => boolean;
    required: RegExp;
    english: RegExp;
    chinese: RegExp;
    alphanum: RegExp;
    upper: RegExp;
    lower: RegExp;
    nospace: RegExp;
    nodbc: RegExp;
    safe: RegExp;
    qq: RegExp;
    age: RegExp;
    zipcode: RegExp;
    ip: RegExp;
    port: RegExp;
    domain: RegExp;
    bizcode: RegExp;
    invoice: RegExp;
    bankcard: RegExp;
    currency: RegExp;
    float: RegExp;
    int: RegExp;
    decimal: RegExp;
    percent: RegExp;
    mail: RegExp;
    url: RegExp;
    account: RegExp;
    password: RegExp;
    hex: RegExp;
    color: RegExp;
    ascii: RegExp;
    base64: RegExp;
    md5: RegExp;
    uuid: RegExp;
    mobile: RegExp;
    telphone: RegExp;
    phone: RegExp;
    year: RegExp;
    month: RegExp;
    day: RegExp;
    hour: RegExp;
    minute: RegExp;
    time: RegExp;
    date: RegExp;
    datetime: RegExp;
    file: RegExp;
    image: RegExp;
    word: RegExp;
    lon: RegExp;
    lat: RegExp;
    approval: RegExp;
    citycode: RegExp;
    address: RegExp;
    isbn: RegExp;
    tag: RegExp;
    jwt: RegExp;
    maca: RegExp;
    even: (arg: string | number) => boolean;
    odd: (arg: string | number) => boolean;
    ipv6: (arg: string) => boolean;
    bodycard: (arg: string | number) => boolean;
    autocard: (arg: string) => boolean;
    not: (arg1: any, arg2: any) => boolean;
    eq: (arg1: any, arg2: any) => boolean;
    gt: <T extends string | number | Date>(arg1: T, arg2: T) => boolean;
    gte: <T extends string | number | Date>(arg1: T, arg2: T) => boolean;
    lt: <T extends string | number | Date>(arg1: T, arg2: T) => boolean;
    lte: <T extends string | number | Date>(arg1: T, arg2: T) => boolean;
    between: <T extends string | number | Date>(arg1: T, arg2: T, arg3: T) => boolean;
    min: <T extends string | number | Date>(arg1: T, arg2: T, ...args: T[]) => boolean;
    max: <T extends string | number | Date>(arg1: T, arg2: T, ...args: T[]) => boolean;
    len: (arg1: string | number | any[], arg2: string | number) => boolean;
    minlen: (arg1: string | number | any[], arg2: string | number) => boolean;
    maxlen: (arg1: string | number | any[], arg2: string | number) => boolean;
    charlen: (arg1: string | number, arg2: string | number) => boolean;
    in: <T extends string | number | object | any[]>(arg1: T, arg2: T) => boolean;
    has: <T extends string | number | object | any[]>(arg1: T, arg2: T) => boolean;
    empty: (arg: any) => boolean;
    regexp: (arg: any, arg2: string | RegExp) => boolean;
    custom: (arg: any, key: string | ValidFunction, ...args: any[]) => boolean | Promise<boolean>;
};
