import { MakeFunction, rules } from './rules';
declare type RulesMap = typeof rules;
export { MakeFunction };
export interface MakerSetting {
    divisionCode?: string | number;
    beginTime?: Date;
    endTime?: Date;
    incrementBase?: number;
}
export declare const config: {
    divisionCode: string;
    beginTime: Date;
    endTime: Date;
    incrementBase: number;
};
export declare const customRule: {
    [key: string]: MakeFunction;
};
declare class SpecificRules {
    private readonly getRndTime;
    readonly rules: {
        md5: (is16b?: boolean, arg?: string) => string;
        uuid: (arg?: string) => string;
        now: (arg?: string) => string;
        regexp: (arg?: string | RegExp) => string;
        enum: <T extends string | number | boolean>(...args: T[]) => T;
        range: (low?: number, high?: number, step?: number) => string;
        int: (low?: number, high?: number) => number;
        number: (low?: number, high?: number, dec?: number) => number;
        bool: () => boolean;
        month: () => number;
        day: () => number;
        hour: () => number;
        minute: () => number;
        mid: RegExp;
        account: RegExp;
        password: RegExp;
        color: RegExp;
        url: RegExp;
        mail: RegExp;
        mobile: RegExp;
        port: RegExp;
        bizcode: RegExp;
        bankcard: RegExp;
        qq: RegExp;
        alphanum: (arg?: number) => string;
        rgb: (arg?: boolean) => string;
        hsl: (arg?: boolean) => string;
        english: (num?: number, arg?: string) => string;
        upper: (arg?: string) => string;
        lower: (arg?: string) => string;
        chinese: (num?: number, arg?: string) => string;
        ip: (local?: boolean) => string;
        text: (n1?: number, arg?: string, n2?: number) => string;
        price: (low?: number, high?: number, arg3?: boolean) => string;
        esurname: () => string;
        enName: () => string;
        enMaleName: () => string;
        enFemaleName: () => string;
        surname: () => string;
        cnName: () => string;
        cnMaleName: () => string;
        cnFemaleName: () => string;
        enState: () => string;
        cnState: () => string;
        company: () => string;
        road: () => string;
        build: () => string;
        job: () => string;
        file: (...exts: string[]) => string;
        fieldType: (str?: "mysql" | "sqlserver" | "oracle" | "sqlite") => string;
    } & {
        increment: (arg1?: boolean, arg2?: number) => number;
        datetime: (arg?: string) => string;
        date: () => string;
        time: () => string;
        year: () => string;
        citycode: () => string;
        province: () => string;
        prefecture: () => string;
        county: () => string;
        phone: () => string;
        zipcode: () => string;
        bodycard: () => string;
        autocard: () => string;
        road: () => string;
        build: () => string;
        address: () => string;
        company: () => string;
        lon: () => string;
        lat: () => string;
        custom: (key: string | MakeFunction, ...args: any[]) => string | number | boolean;
    };
    private history;
    private __rules;
    private division;
    private maps;
    reload(): void;
}
export declare type rulesName = keyof RulesMap | keyof typeof SpecificRules.prototype.rules;
export default SpecificRules;
